---
apiVersion: v1
kind: Namespace
metadata:
  name: orders
  labels:
    app.kubernetes.io/created-by: eks-hackathon-2023
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orders
  namespace: orders
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: orders
  namespace: orders
data:
  SPRING_PROFILES_ACTIVE: mysql,rabbitmq
  SPRING_RABBITMQ_HOST: rabbitmq.rabbitmq.svc
---
apiVersion: v1
kind: Secret
metadata:
  name: orders-db
  namespace: orders
data:
  url: "amRiYzptYXJpYWRiOi8vb3JkZXJzLW15c3FsOjMzMDYvb3JkZXJz"
  username: "b3JkZXJzX3VzZXI="
  password: "ZGVmYXVsdF9wYXNzd29yZA=="
---
apiVersion: v1
kind: Service
metadata:
  name: orders-mysql
  namespace: orders
  labels:
    app.kubernetes.io/created-by: eks-hackathon-2023
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  namespace: orders
  labels:
    app.kubernetes.io/created-by: eks-hackathon-2023
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-mysql
  namespace: orders
  labels:
    app.kubernetes.io/created-by: eks-hackathon-2023
    app.kubernetes.io/team: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: mysql
        app.kubernetes.io/created-by: eks-hackathon-2023
        app.kubernetes.io/team: database
    spec:
      containers:
      - name: mysql
        image: "public.ecr.aws/docker/library/mysql:5.7"
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_DATABASE
          value: orders
        - name: MYSQL_USER
          value: orders_user
        - name: MYSQL_PASSWORD
          value: default_password
        ports:
        - name: mysql
          containerPort: 3306
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  namespace: orders
  labels:
    app.kubernetes.io/created-by: eks-hackathon-2023
    app.kubernetes.io/type: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: service
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: eks-hackathon-2023
    spec:
      serviceAccountName: orders
      securityContext:
        fsGroup: 1000
      containers:
        - name: orders
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
            - name: SPRING_DATASOURCE_WRITER_URL
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: url
            - name: SPRING_DATASOURCE_WRITER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: username
            - name: SPRING_DATASOURCE_WRITER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: password
            - name: SPRING_DATASOURCE_READER_URL
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: url
            - name: SPRING_DATASOURCE_READER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: username
            - name: SPRING_DATASOURCE_READER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db
                  key: password
          envFrom:
            - configMapRef:
                name: orders
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            successThreshold: 3
            periodSeconds: 5
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 1Gi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory